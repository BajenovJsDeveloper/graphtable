{"version":3,"sources":["mockFetch/mockfetch.js","components/DatePicker/DatePicker.jsx","components/FilterButton/FilterButton.jsx","components/SortingIcon/SortingIcon.jsx","projectapi/projectapi.js","projectapi/tableapi.js","components/TableGrid/TableGrid.jsx","components/Lodaing/Loading.jsx","components/Graph.js","index.js"],"names":["SUMM_INTERVAL","dTcount","getLocalDateValue","day","Math","round","random","time","ceil","Date","valueOf","mockdata","senders","this","data","message","numOfRecords","len","length","i","debitAmount","toFixed","creditAmount","Number","tranzaction","push","transactionID","date","sender","floor","msg","dateRange","resetMessage","start","end","filter","item","d1","d2","d3","getDate","getMonth","getFullYear","reverse","newDate","dateMothAgo","setMonth","setDate","dateMothAgoValue","dateNowValue","chunkData","splice","setMessage","range","abs","create","fetchMock","get","url","payload","userName","userPassword","filtredData","checkValid","determinateSize","filterByDate","filterByDefault","Promise","resolve","status","dataMsg","getMessage","StaticDatePicker","onSelect","onCancel","useState","startDate","setStartDate","useEffect","onESC","event","keyCode","document","addEventListener","removeEventListener","selected","onChange","dates","selectsRange","inline","useStyles","makeStyles","filterIcon","marginRight","padding","FilterButton","onFilterSort","classes","isShow","setIsShow","Fragment","IconButton","onClick","disabled","aria-label","className","title","color","DatePicker","SortingIcon","direction","clickSort","name","active","size","UNIT","left","right","projectAPI","getPicesOfChart","fieldName","points","map","Map","forEach","sum","has","parseFloat","set","entry","sort","a","b","sorting","dir","field","dataList","sign","sortingByFieldName","rowsPageData","newDataList","defaultPagination","page","perPage","count","createPage","paginator","partialData","chartInit","chartData","optionData","titleDebit","titleCredit","credit","debit","tableAPI","num","numFormated","toString","split","fix","float","digit","idx","join","dateValue","toLocaleDateString","str","toUpperCase","toLocaleTimeString","table","minWidth","width","tableTH","whiteSpace","fontSize","tableTD","margin","paddingRight","tableBG","backgroundColor","TableGrid","props","handleSorting","onChangePage","onChangePerPage","id","dirSort","setDirSort","handleLastSorting","prev","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","colSpan","align","Box","TableBody","row","TableFooter","TablePagination","rowsPerPageOptions","label","value","rowsPerPage","SelectProps","inputProps","native","onChangeRowsPerPage","setStyle","loading","display","justifyContent","alignItems","position","top","height","zIndex","icon","Loading","isLoading","URL","Graph","setData","setRowsPageData","setPaginator","setLoading","setDateRange","setChartData","showGpaphs","chartOption","legend","getDataFromServer","mockFetch","then","response","Error","setTimeout","console","log","valuesDebit","valuesCredit","fontFamily","p","chartType","loader","options","rootProps","sortedData","newPaginator","e","newPginator","pagesOnPage","target","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.40b078dc.chunk.js","sourcesContent":["const USER_NAME = \"Vladimir\";\nconst USER_PASSWORD = \"admin\";\nconst COUNT_OF_RECORDS = 1000;\nconst DAY_INTERVAL = 1;\nconst HOURS_PER_DAY = 24;\nconst MINUTES = 0;\nconst YEAR = 2020;\nconst MONTH = 8;\nconst SUMM_INTERVAL = 10000.0;\nconst DEFAULT_NUM_OF_RECORDS = 10;\nconst MAX_DATE_RANGE = 15984000000;\nconst START = 0;\nconst FLOAT_LENGTH = 2;\nlet dTcount = 1;\n\nfunction getLocalDateValue() {\n  const day = Math.round(Math.random() * DAY_INTERVAL);\n  const time = Math.ceil(Math.random() * HOURS_PER_DAY);\n  dTcount += day;\n  const newDate = new Date(YEAR, MONTH, dTcount, time, MINUTES).valueOf();\n  return newDate;\n}\n\nclass MockData {\n  constructor(senders) {\n    this.data = [];\n    this.senders = senders;\n    this.message = \"\";\n  }\n\n  create(numOfRecords = DEFAULT_NUM_OF_RECORDS) {\n    const len = this.senders.length;\n    for (let i = 1; i <= numOfRecords; i++) {\n      let debitAmount = (Math.random() * SUMM_INTERVAL).toFixed(FLOAT_LENGTH);\n      let creditAmount = (Math.random() * SUMM_INTERVAL).toFixed(FLOAT_LENGTH);\n      debitAmount = Number(debitAmount);\n      creditAmount = Number(creditAmount);\n      const tranzaction = Math.round(Math.random() * 1);\n      this.data.push({\n        transactionID: i,\n        date: getLocalDateValue(),\n        debitAmount: tranzaction === 0 ? debitAmount : 0,\n        creditAmount: tranzaction === 1 ? creditAmount : 0,\n        sender: this.senders[Math.floor(Math.random() * len)],\n      });\n    }\n  }\n  getMockData() {\n    return this.data;\n  }\n  setMessage(msg) {\n    this.message = msg;\n  }\n  resetMessage() {\n    this.message = \"\";\n  }\n  getMessage() {\n    return this.message;\n  }\n  filterByDate(dateRange) {\n    this.resetMessage();\n    const start = dateRange.start;\n    const end = dateRange.end;\n    const data = this.data.filter((item) => {\n      if (item.date >= start && item.date <= end) {\n        return true;\n      } else {\n        const d1 = new Date(item.date);\n        const d2 = new Date(start);\n        const d3 = new Date(end);\n        if (\n          (d1.getDate() === d2.getDate() &&\n            d1.getMonth() === d2.getMonth() &&\n            d1.getFullYear() === d2.getFullYear()) ||\n          (d3.getDate() === d1.getDate() &&\n            d3.getMonth() === d1.getMonth() &&\n            d3.getFullYear() === d1.getFullYear())\n        )\n          return true;\n      }\n      return false;\n    });\n    return data.reverse();\n  }\n  filterByDefault() {\n    this.resetMessage();\n    const newDate = new Date();\n    const dateMothAgo = new Date();\n    dateMothAgo.setMonth(newDate.getMonth() - 1);\n    dateMothAgo.setDate(newDate.getDate() - 1);\n    const dateMothAgoValue = dateMothAgo.valueOf();\n    const dateNowValue = newDate.valueOf();\n    const data = this.data.filter((item) => {\n      if (item.date >= dateMothAgoValue && item.date <= dateNowValue)\n        return true;\n      return false;\n    });\n    return data.reverse();\n  }\n  determinateSize(data) {\n    const chunkData = [...data];\n    if (data.length > 200) {\n      chunkData.splice(200);\n      this.setMessage(\"Too more data.\");\n    }\n    return chunkData;\n  }\n  checkValid(range) {\n    if (Math.abs(range.start - range.end) > MAX_DATE_RANGE) return false;\n    return true;\n  }\n}\n\nconst mockdata = new MockData([\n  \"MICB\",\n  \"MAIB\",\n  \"EXB\",\n  \"ECB\",\n  \"VICB\",\n  \"IMPORT-SRL\",\n  \"FORDEXPRESS\",\n]);\n\nmockdata.create(COUNT_OF_RECORDS);\n\nconst fetchMock = {\n  get: (url, payload) => {\n    if (\n      payload.userName === USER_NAME &&\n      payload.userPassword === USER_PASSWORD\n    ) {\n      let filtredData = [];\n      let start = \"\";\n      let end = \"\";\n      if (payload.dateRange && mockdata.checkValid(payload.dateRange)) {\n        filtredData = mockdata.determinateSize(\n          mockdata.filterByDate(payload.dateRange)\n        );\n      } else {\n        filtredData = mockdata.determinateSize(mockdata.filterByDefault());\n        end = filtredData[START].date;\n        start = filtredData[filtredData.length - 1].date;\n      }\n\n      return Promise.resolve({\n        data: filtredData,\n        message: \"auth is ok\",\n        status: \"ok\",\n        range: { start, end },\n        dataMsg: mockdata.getMessage(),\n      });\n    } else {\n      return Promise.resolve({\n        data: [],\n        message: \"User Auth EROR!!\",\n        status: \"error\",\n        dataMsg: mockdata.getMessage(),\n      });\n    }\n  },\n};\nexport default fetchMock;\n","import React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./datepicker.css\";\n\nconst StaticDatePicker = ({ onSelect, onCancel }) => {\n  const [startDate, setStartDate] = useState(new Date());\n\n  useEffect(() => {\n    function onESC(event) {\n      if (event.keyCode === 27) {\n        onCancel();\n      }\n    }\n    document.addEventListener(\"keydown\", onESC);\n\n    return () => {\n      document.removeEventListener(\"keydown\", onESC);\n    };\n  }, [onCancel]);\n  const onChange = (dates) => {\n    const [start, end] = dates;\n    setStartDate(start);\n    if (start && end) {\n      onSelect({ start: start.valueOf(), end: end.valueOf() });\n    }\n  };\n  return (\n    <DatePicker\n      selected={startDate}\n      onChange={onChange}\n      startDate={startDate}\n      selectsRange\n      inline\n    />\n  );\n};\n\nexport default StaticDatePicker;\n","import React, { useState } from \"react\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport DatePicker from \"../DatePicker/DatePicker\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  filterIcon: {\n    marginRight: 20,\n    padding: 7,\n  },\n});\n\nfunction FilterButton({ onFilterSort }) {\n  const classes = useStyles();\n  const [isShow, setIsShow] = useState(false);\n  const date = new Date();\n  const handleClick = () => {\n    setIsShow(true);\n  };\n  const onSelect = (dateRange) => {\n    setIsShow(false);\n    onFilterSort(dateRange);\n  };\n  const onCancel = () => {\n    setIsShow(false);\n  };\n  return (\n    <React.Fragment>\n      <IconButton\n        onClick={handleClick}\n        disabled={false}\n        aria-label=\"Filter\"\n        className={classes.filterIcon}\n        title=\"Filter by date\"\n      >\n        <FilterListIcon color=\"secondary\" />\n      </IconButton>\n      {isShow && (\n        <div className=\"date-picker\">\n          <DatePicker date={date} onSelect={onSelect} onCancel={onCancel} />\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default FilterButton;\n","import React from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\n\nfunction SortingIcon({ direction, clickSort, name, active }) {\n  let color = active === name ? \"secondary\" : \"disabled\";\n  return (\n    <IconButton\n      onClick={() => clickSort(name)}\n      disabled={false}\n      aria-label=\"Sorting\"\n      size=\"small\"\n    >\n      {direction === \"asc\" ? (\n        <ExpandMoreIcon color={color} />\n      ) : (\n        <ExpandLessIcon color={color} />\n      )}\n    </IconButton>\n  );\n}\n\nexport default SortingIcon;\n","const CREDIT_AMOUNT_FIELD = \"creditAmount\";\nconst DEBIT_AMOUNT_FIELD = \"debitAmount\";\nconst DEFAULT_PER_PAGE = 10;\nconst DEFAULT_PAGE = 0;\nconst ALL_PAGES = -1;\nconst SENDER = 0;\nconst DEBIT = 0;\nconst ZERO = 0;\nconst UNIT = {\n  left: \"\",\n  right: \"mdl\",\n};\n\nconst projectAPI = {\n  getPicesOfChart(data, fieldName) {\n    const points = [];\n    const name = fieldName === DEBIT ? DEBIT_AMOUNT_FIELD : CREDIT_AMOUNT_FIELD;\n    const map = new Map();\n    data.forEach((item) => {\n      let sum = 0.0;\n      if (map.has(item.sender)) {\n        sum = map.get(item.sender) + Number.parseFloat(item[name]);\n        map.set(item.sender, sum);\n      } else {\n        map.set(item.sender, item[name]);\n      }\n    });\n    for (let entry of map) {\n      points.push(entry);\n    }\n    points.sort((a, b) => {\n      if (a[SENDER] > b[SENDER]) return 1;\n      if (a[SENDER] < b[SENDER]) return -1;\n      return 0;\n    });\n    return points;\n  },\n\n  sorting(dir, field, dataList) {\n    const NEGATIVE_SENSE = -1;\n    const POZITIVE_SENSE = 1;\n    const sign = dir === \"desc\" ? POZITIVE_SENSE : NEGATIVE_SENSE;\n    return dataList.sort((a, b) => {\n      if (a[field] > b[field]) return POZITIVE_SENSE * sign;\n      if (a[field] < b[field]) return NEGATIVE_SENSE * sign;\n      else return ZERO;\n    });\n  },\n\n  sortingByFieldName(dir, fieldName, rowsPageData) {\n    const newDataList = [...rowsPageData];\n    switch (fieldName) {\n      case \"id\": {\n        this.sorting(dir, \"transactionID\", newDataList);\n        break;\n      }\n      case \"sender\": {\n        this.sorting(dir, \"sender\", newDataList);\n        break;\n      }\n      case \"date\": {\n        this.sorting(dir, \"date\", newDataList);\n        break;\n      }\n      case \"credit\": {\n        this.sorting(dir, \"creditAmount\", newDataList);\n        break;\n      }\n      case \"debit\": {\n        this.sorting(dir, \"debitAmount\", newDataList);\n        break;\n      }\n      default: {\n        this.sorting(dir, \"transactionID\", newDataList);\n      }\n    }\n    return newDataList;\n  },\n\n  defaultPagination() {\n    return {\n      page: DEFAULT_PAGE,\n      perPage: DEFAULT_PER_PAGE,\n      count: ZERO,\n    };\n  },\n\n  createPage(dataList, paginator) {\n    let partialData = [];\n    let len = dataList.length;\n    let start, count;\n    let perPage = paginator.perPage;\n    let page = paginator.page;\n\n    if (perPage === DEFAULT_PAGE) {\n      perPage = DEFAULT_PER_PAGE;\n      page = DEFAULT_PAGE;\n    }\n    if (perPage >= len) page = DEFAULT_PAGE;\n    if (perPage === ALL_PAGES) perPage = len;\n    start = page * perPage;\n    count = len >= start + perPage ? start + perPage : len;\n    for (let i = start; i < count; i++) {\n      partialData.push(dataList[i]);\n    }\n    perPage = paginator.perPage !== ALL_PAGES ? perPage : paginator.perPage;\n    return partialData;\n  },\n\n  chartInit(chartData = [[], []], title = \"Graph\") {\n    const optionData = {\n      titleDebit: title,\n      titleCredit: title,\n      credit: [[\"Credit\", \"Credit Graph\"], ...chartData[1]],\n      debit: [[\"Debit\", \"Debit Graph\"], ...chartData[0]],\n    };\n    return optionData;\n  },\n};\n\nexport { projectAPI, UNIT };\n","import { UNIT } from \"./projectapi\";\n\nconst FIXED = 0;\nconst FLOAT = 1;\n\nconst tableAPI = {\n  toNumberSpacedString(num) {\n    if (num !== 0) {\n      let numFormated = num.toString().split(\".\");\n      let fix = numFormated[FIXED].split(\"\").reverse();\n      let float = numFormated[FLOAT];\n      fix = fix.map((digit, idx) =>\n        idx % 3 === 0 && idx > 0 ? `${digit} ` : digit\n      );\n      fix = fix.reverse().join(\"\");\n      numFormated[FIXED] = fix;\n      numFormated[FLOAT] = float;\n      return numFormated.join(\".\");\n    }\n    return null;\n  },\n\n  dateValueToString(dateValue) {\n    return new Date(dateValue).toLocaleDateString();\n  },\n\n  reversDirArrow(dir) {\n    return dir === \"asc\" ? \"desc\" : \"asc\";\n  },\n\n  toNumberWithPrefix(str) {\n    if (str !== null)\n      return `${UNIT.left.toUpperCase()} ${str} ${UNIT.right.toUpperCase()}`;\n    else return \"-\";\n  },\n\n  getDateToString(date) {\n    const newDate = new Date(date);\n    return newDate.toLocaleDateString();\n  },\n\n  getTimeToString(date) {\n    const newDate = new Date(date);\n    return newDate.toLocaleTimeString();\n  },\n};\n\nexport { tableAPI };\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FilterButton from \"../FilterButton/FilterButton\";\nimport SortingIcon from \"../SortingIcon/SortingIcon\";\nimport Box from \"@material-ui/core/Box\";\nimport { tableAPI } from \"../../projectapi/tableapi\";\nimport \"./style.css\";\n\nconst ALL_PAGES = -1;\nconst PP_1 = 10;\nconst PP_2 = 25;\nconst PP_3 = 50;\nconst PP_4 = 100;\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: \"300px\",\n    width: \"100%\",\n  },\n  tableTH: {\n    color: \"#0d218c\",\n    whiteSpace: \"nowrap\",\n    fontSize: \"0.8rem\",\n    padding: \"3px 10px 3px 2px\",\n  },\n  tableTD: {\n    color: \"gray\",\n    padding: \"3px\",\n    \"&>p\": {\n      padding: 0,\n      margin: 0,\n    },\n    \"&:first-child\": {\n      paddingRight: 30,\n      width: 100,\n    },\n    \"&:nth-child(2)\": {\n      width: 100,\n    },\n    \"&>p:last-child\": {\n      color: \"#c1c1c1\",\n      fontSize: \"0.8em\",\n    },\n  },\n  tableBG: {\n    backgroundColor: \"#e0e0e0\",\n  },\n});\n\nexport default function TableGrid(props) {\n  const {\n    rowsPageData,\n    handleSorting,\n    onChangePage,\n    onChangePerPage,\n    onFilterSort,\n    paginator,\n    dateRange,\n  } = props;\n\n  const [dirSort, setDirSort] = useState({\n    sender: \"desc\",\n    id: \"asc\",\n    date: \"desc\",\n    debit: \"desc\",\n    credit: \"desc\",\n    active: \"id\",\n  });\n\n  const classes = useStyles();\n\n  const handleLastSorting = (fieldName) => {\n    let dir = tableAPI.reversDirArrow(dirSort[fieldName]);\n    setDirSort((prev) => ({ ...prev, [fieldName]: dir, active: fieldName }));\n    handleSorting(dir, fieldName);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead className={classes.tableBG}>\n          <TableRow>\n            <TableCell\n              colSpan={5}\n              className={classes.tableTH}\n              align=\"left\"\n              title=\"Filter\"\n            >\n              <Box className=\"filter\">\n                <FilterButton onFilterSort={onFilterSort} />\n                <Box className=\"date__container\">\n                  <div className=\"date__label\">Date range:</div>\n                  <div className=\"date__range\">\n                    {`${tableAPI.dateValueToString(\n                      dateRange.start\n                    )} - ${tableAPI.dateValueToString(dateRange.end)}`}\n                  </div>\n                </Box>\n              </Box>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell\n              className={classes.tableTH}\n              align=\"center\"\n              title=\"Sorting by id number\"\n            >\n              <SortingIcon\n                active={dirSort.active}\n                name=\"id\"\n                direction={dirSort.id}\n                clickSort={handleLastSorting}\n                title=\"Sorting by id number\"\n              />\n              Transaction ID\n            </TableCell>\n            <TableCell\n              className={classes.tableTH}\n              align=\"center\"\n              title=\"Sorting by date\"\n            >\n              <SortingIcon\n                active={dirSort.active}\n                name=\"date\"\n                direction={dirSort.date}\n                clickSort={handleLastSorting}\n              />\n              Date\n            </TableCell>\n            <TableCell\n              className={classes.tableTH}\n              align=\"right\"\n              title=\"Sorting debit\"\n            >\n              <SortingIcon\n                active={dirSort.active}\n                name=\"debit\"\n                direction={dirSort.debit}\n                clickSort={handleLastSorting}\n              />\n              Debet Amount\n            </TableCell>\n            <TableCell\n              className={classes.tableTH}\n              align=\"right\"\n              title=\"Sorting by credit\"\n            >\n              <SortingIcon\n                active={dirSort.active}\n                name=\"credit\"\n                direction={dirSort.credit}\n                clickSort={handleLastSorting}\n              />\n              Credit Amount\n            </TableCell>\n            <TableCell\n              className={classes.tableTH}\n              align=\"center\"\n              title=\"Sorting by sender\"\n            >\n              <SortingIcon\n                active={dirSort.active}\n                name=\"sender\"\n                direction={dirSort.sender}\n                clickSort={handleLastSorting}\n              />\n              Sender\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rowsPageData.map((row) => (\n            <TableRow key={row.transactionID}>\n              <TableCell className={classes.tableTD} align=\"right\">\n                {row.transactionID}\n              </TableCell>\n              <TableCell className={classes.tableTD} align=\"right\">\n                <p>{tableAPI.getDateToString(row.date)}</p>\n                <p>{tableAPI.getTimeToString(row.date)}</p>\n              </TableCell>\n              <TableCell className={classes.tableTD} align=\"right\">\n                {tableAPI.toNumberWithPrefix(\n                  tableAPI.toNumberSpacedString(row.debitAmount)\n                )}\n              </TableCell>\n              <TableCell className={classes.tableTD} align=\"right\">\n                {tableAPI.toNumberWithPrefix(\n                  tableAPI.toNumberSpacedString(row.creditAmount)\n                )}\n              </TableCell>\n              <TableCell className={classes.tableTD} align=\"center\">\n                {row.sender}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[\n                PP_1,\n                PP_2,\n                PP_3,\n                PP_4,\n                { label: \"All\", value: ALL_PAGES },\n              ]}\n              colSpan={5}\n              count={paginator.count}\n              rowsPerPage={paginator.perPage}\n              page={paginator.page}\n              SelectProps={{\n                inputProps: { \"aria-label\": \"Records per page\" },\n                native: true,\n              }}\n              onChangePage={onChangePage}\n              onChangeRowsPerPage={onChangePerPage}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\";\nimport Box from \"@material-ui/core/Box\";\nimport \"./loading.css\";\n\nconst setStyle = makeStyles({\n  loading: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(0,0,0,0.2)\",\n    zIndex: 200,\n  },\n  icon: {\n    fontSize: \"3rem\",\n  },\n});\n\nexport default function Loading({ isLoading }) {\n  const classes = setStyle();\n  if (!isLoading) return null;\n  return (\n    <Box className={classes.loading}>\n      <HourglassEmptyIcon id=\"load\" />\n    </Box>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport mockFetch from \"../mockFetch/mockfetch.js\";\nimport TableGrid from \"./TableGrid/TableGrid\";\nimport Box from \"@material-ui/core/Box\";\nimport Loading from \"./Lodaing/Loading\";\nimport Chart from \"react-google-charts\";\nimport { projectAPI } from \"../projectapi/projectapi\";\nimport \"./graph.css\";\n\nconst URL = \"https://graphs.com\";\nconst SERVER_DELAY_TIME = 1000;\nconst USER_PASSWORD = \"admin\";\nconst USER_NAME = \"Vladimir\";\nconst CREDIT = 1;\nconst DEBIT = 0;\nconst ZERO = 0;\n\nfunction Graph() {\n  const [dataList, setData] = useState([]);\n  const [rowsPageData, setRowsPageData] = useState([]);\n  const [paginator, setPaginator] = useState(() =>\n    projectAPI.defaultPagination()\n  );\n  const [isLoading, setLoading] = useState(false);\n  const [dateRange, setDateRange] = useState({\n    start: new Date().toLocaleDateString(),\n    end: new Date().toLocaleDateString(),\n  });\n  const [chartData, setChartData] = useState(projectAPI.chartInit());\n  const showGpaphs = dataList.length > 0 ? true : false;\n\n  const chartOption = {\n    title: chartData.title,\n    legend: { position: \"left\" },\n  };\n\n  const onFilterSort = (range) => {\n    getDataFromServer(URL, range);\n  };\n\n  const handleSorting = (dir, fieldName) => {\n    const sortedData = projectAPI.sortingByFieldName(dir, fieldName, dataList);\n    setData(sortedData);\n    const newPaginator = { ...paginator, page: 0 };\n    setPaginator(newPaginator);\n  };\n\n  const onChangePage = (e, page) => {\n    const newPginator = { ...paginator, page };\n    setRowsPageData(projectAPI.createPage(dataList, newPginator));\n    setPaginator(newPginator);\n  };\n\n  const onChangePerPage = (perPage) => {\n    const pagesOnPage = Number(perPage.target.value);\n    const newPginator = { ...paginator, page: 0, perPage: pagesOnPage };\n    setRowsPageData(projectAPI.createPage(dataList, newPginator));\n    setPaginator(newPginator);\n  };\n\n  const getDataFromServer = (url, range) => {\n    const payload = {\n      userName: USER_NAME,\n      userPassword: USER_PASSWORD,\n    };\n    if (range) payload.dateRange = range;\n    setLoading(true);\n    mockFetch.get(url, payload).then((response) => {\n      if (response.status === \"ok\") {\n        setTimeout(() => {\n          setData(response.data);\n          setPaginator((prev) => ({\n            ...prev,\n            page: 0,\n            count: response.data.length,\n            perPage: prev.perPage,\n          }));\n          setLoading(false);\n          console.log(\n            \"This line for developing! Data From Server: \",\n            response,\n            range\n          );\n          if (range) setDateRange(range);\n          else if (response.range) setDateRange(response.range);\n        }, SERVER_DELAY_TIME);\n      } else {\n        throw new Error(\"Something is wrong!!! \" + response.message);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (dataList.length > 0) {\n      setRowsPageData(projectAPI.createPage(dataList, paginator));\n    }\n  }, [dataList, paginator]);\n\n  useEffect(() => {\n    getDataFromServer(URL);\n  }, []);\n\n  useEffect(() => {\n    if (dataList.length > ZERO) {\n      const valuesDebit = projectAPI.getPicesOfChart(dataList, DEBIT);\n      const valuesCredit = projectAPI.getPicesOfChart(dataList, CREDIT);\n      setChartData(\n        projectAPI.chartInit([valuesDebit, valuesCredit], [\"Debit\", \"Credit\"])\n      );\n    }\n  }, [dateRange]);\n\n  return (\n    <div className=\"App\">\n      <Loading isLoading={isLoading} />\n      {showGpaphs && (\n        <Box\n          className=\"App__graph-container\"\n          fontFamily=\"Roboto\"\n          fontSize={20}\n          p={1}\n        >\n          <Box className=\"App__graphic\">\n            Debit Amount\n            {\n              <Chart\n                width={\"400px\"}\n                height={\"250px\"}\n                chartType=\"PieChart\"\n                loader={<div>Loading Chart</div>}\n                data={chartData.debit}\n                options={chartOption}\n                rootProps={{ \"data-testid\": \"1\" }}\n              />\n            }\n          </Box>\n          <Box className=\"App__graphic\">\n            Credit Amount\n            <Chart\n              width={\"400px\"}\n              height={\"250px\"}\n              chartType=\"PieChart\"\n              loader={<div>Loading Chart</div>}\n              data={chartData.credit}\n              options={chartOption}\n              rootProps={{ \"data-testid\": \"1\" }}\n            />\n          </Box>\n        </Box>\n      )}\n      <Box className=\"App__table\">\n        <TableGrid\n          rowsPageData={rowsPageData}\n          onFilterSort={onFilterSort}\n          paginator={paginator}\n          handleSorting={handleSorting}\n          onChangePage={onChangePage}\n          onChangePerPage={onChangePerPage}\n          dateRange={dateRange}\n        />\n      </Box>\n    </div>\n  );\n}\n\nexport default Graph;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Graph from \"./components/Graph.js\";\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<Graph />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}