{"version":3,"sources":["mockFetch/mockfetch.js","DatePicker/DatePicker.jsx","FilterButton/FilterButton.jsx","SortingIcon/SortingIcon.jsx","TableGrid/TableGrid.jsx","Lodaing/Loading.jsx","Graph.js","index.js"],"names":["SUMM_INTERVAL","dTcount","getLocalDateValue","day","Math","round","random","time","ceil","Date","valueOf","mockdata","senders","this","data","numOfRecords","len","length","i","push","transactionID","date","debitAmount","creditAmount","sender","floor","create","fetchMock","get","url","payload","getMockData","partialData","start","count","page","pagesOnPage","perPage","getPartial","userName","userPassword","Promise","resolve","message","status","StaticDatePicker","onSelect","onCancel","useEffect","onESC","event","keyCode","document","addEventListener","removeEventListener","utils","DateFnsUtils","DatePicker","autoOk","variant","openTo","value","onChange","newDate","useStyles","makeStyles","filterIcon","marginLeft","position","FilterButton","isFilterActive","onFilterSort","onFilterReset","classes","useState","isShow","setIsShow","setNewDate","Fragment","IconButton","onClick","prev","disabled","aria-label","className","color","dateChanged","SortingIcon","direction","clickSort","name","active","size","table","minWidth","width","tableTH","whiteSpace","fontSize","padding","tableTD","tableBG","backgroundColor","TableGrid","props","rowsPageData","handleSorting","onChangePage","onChangePerPage","paginator","id","debit","credit","dirSort","setDirSort","handleLastSorting","fieldName","dir","reversDirArrow","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","toLocaleString","TableFooter","TablePagination","rowsPerPageOptions","label","colSpan","rowsPerPage","SelectProps","inputProps","native","onChangeRowsPerPage","setStyle","loading","display","justifyContent","alignItems","top","left","height","zIndex","icon","Loading","isLoading","Box","URL","creatGraph","itemId","values","ctx","getElementById","getContext","labels","index","chart","Chart","type","datasets","borderColor","borderWidth","destroy","bind","getPicesOfChart","points","step","sum","sorting","field","dataList","sign","sort","a","b","getDateValue","getDate","year","getFullYear","month","getMonth","Graph","setRowsPageData","defaultPagination","setPaginator","setFilter","setLoading","getDataFromServer","paging","undefined","mockFetch","then","Error","setTimeout","console","log","valuesCredit","valuesDebit","destroyCredit","destroyDebit","fontFamily","p","filteredData","dateValue","filter","item","filtrDataByDate","rows","newDataList","sortingByFieldName","e","Number","target","ReactDOM","render"],"mappings":"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","file":"static/js/main.ef4dbbf5.chunk.js","sourcesContent":["const USER_NAME = \"Vladimir\";\nconst USER_PASSWORD = \"admin\";\nconst COUNT_OF_RECORDS = 125;\nconst ALL_PAGES = -1;\nconst PER_PAGE_DEFAULT = 10;\nconst DAY_INTERVAL = 1;\nconst HOURS_PER_DAY = 24;\nconst MINUTES = 0;\nconst YEAR = 2020;\nconst MONTH = 1;\nconst SUMM_INTERVAL = 3000;\nconst DEFAULT_PAGE = 0;\nconst DEFAULT_MUN_OF_RECORDS = 10;\nlet dTcount = 1;\n\nfunction getLocalDateValue() {\n  const day = Math.round(Math.random() * DAY_INTERVAL);\n  const time = Math.ceil(Math.random() * HOURS_PER_DAY);\n  dTcount += day;\n  const newDate = new Date(YEAR, MONTH, dTcount, time, MINUTES).valueOf();\n  return newDate;\n}\n\nclass MockData {\n  constructor(senders) {\n    this.data = [];\n    this.senders = senders;\n  }\n  create(numOfRecords = DEFAULT_MUN_OF_RECORDS) {\n    const len = this.senders.length;\n    for (let i = 1; i <= numOfRecords; i++) {\n      this.data.push({\n        transactionID: i,\n        date: getLocalDateValue(),\n        debitAmount: Math.round(Math.random() * SUMM_INTERVAL),\n        creditAmount: Math.round(Math.random() * SUMM_INTERVAL),\n        sender: this.senders[Math.floor(Math.random() * len)],\n      });\n    }\n  }\n  getMockData() {\n    return this.data;\n  }\n}\n\nfunction getPartial(data, page = DEFAULT_PAGE, pagesOnPage = PER_PAGE_DEFAULT) {\n  let partialData = [];\n  let len = data.length;\n  let start, count;\n  let perPage = pagesOnPage;\n\n  if (perPage === DEFAULT_PAGE) {\n    perPage = PER_PAGE_DEFAULT;\n    page = DEFAULT_PAGE;\n  }\n  if (perPage >= len) page = DEFAULT_PAGE;\n  if (perPage === ALL_PAGES) perPage = len;\n  start = page * perPage;\n  count = len >= start + perPage ? start + perPage : len;\n  for (let i = start; i < count; i++) {\n    partialData.push(data[i]);\n  }\n  perPage = pagesOnPage !== ALL_PAGES ? perPage : pagesOnPage;\n  return { data: partialData, page, perPage };\n}\n\nconst mockdata = new MockData([\"MICB\", \"MAIB\", \"EXB\", \"ECB\", \"VICB\", \"IMPORT-SRL\", \"FORDEXPRESS\"]);\nmockdata.create(COUNT_OF_RECORDS);\n\nconst fetchMock = {\n  get: (url, payload) => {\n    let data = mockdata.getMockData();\n    let partialData = getPartial(data, payload.page, payload.perPage);\n    if (\n      payload.userName === USER_NAME &&\n      payload.userPassword === USER_PASSWORD\n    ) {\n      return Promise.resolve({\n        message: \"auth is ok\",\n        status: \"ok\",\n        data: partialData.data,\n        page: partialData.page,\n        perPage: partialData.perPage,\n        count: data.length,\n      });\n    } else {\n      return Promise.resolve({\n        data: {},\n        message: \"User Auth EROR!!\",\n        status: \"error\",\n      });\n    }\n  },\n};\nexport default fetchMock;\n","import React, { useEffect } from \"react\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nconst StaticDatePicker = ({ onSelect, onCancel, date }) => {\n  const onSelectDate = (newDate) => {\n    onSelect(newDate);\n  };\n  useEffect(()=>{\n    function onESC(event) {\n      if(event.keyCode === 27){\n        onCancel();\n      }\n    }\n    document.addEventListener('keydown',onESC);\n\n    return () => {document.removeEventListener('keydown',onESC)}\n  },[onCancel]);\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <DatePicker\n        autoOk\n        variant=\"static\"\n        openTo=\"date\"\n        value={date}\n        onChange={onSelectDate}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n\nexport default StaticDatePicker;\n","import React, { useState } from \"react\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport DatePicker from \"../DatePicker/DatePicker\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  filterIcon: {\n    marginLeft: 30,\n    position: \"relative\",\n  },\n});\n\nfunction FilterButton({ isFilterActive, onFilterSort, onFilterReset }) {\n  const classes = useStyles();\n  const [isShow, setIsShow] = useState(false);\n  const [date, setNewDate] = useState(new Date());\n\n  const handleClick = () => {\n    if (isFilterActive) {\n      onFilterReset();\n    } else {\n      setIsShow((prev) => !prev);\n    }\n  };\n  const onSelect = (dateChanged) => {\n    setIsShow(false);\n    setNewDate(dateChanged);\n    onFilterSort(dateChanged);\n  };\n  const onCancel = () => {\n    setIsShow(false);\n  }\n  return (\n    <React.Fragment>\n      <IconButton\n        onClick={handleClick}\n        disabled={false}\n        aria-label=\"Filter\"\n        className={classes.filterIcon}\n      >\n        <FilterListIcon color={!isFilterActive ? \"disabled\" : \"secondary\"} />\n      </IconButton>\n      {isShow && !isFilterActive && (\n        <div className=\"date-picker\">\n          <DatePicker date={date} onSelect={onSelect} onCancel={onCancel}/>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default FilterButton;\n","import React from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\n\nfunction SortingIcon({ direction, clickSort, name, active }) {\n  let color = active === name ? \"secondary\" : \"disabled\";\n  return (\n    <IconButton\n      onClick={() => clickSort(name)}\n      disabled={false}\n      aria-label=\"Sorting\"\n      size=\"small\"\n    >\n      {direction === \"asc\" ? (\n        <ExpandMoreIcon color={color} />\n      ) : (\n        <ExpandLessIcon color={color} />\n      )}\n    </IconButton>\n  );\n}\n\nexport default SortingIcon;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FilterButton from \"../FilterButton/FilterButton\";\nimport SortingIcon from \"../SortingIcon/SortingIcon\";\nimport \"./style.css\";\n\nconst ALL_PAGES = -1;\nconst PP_1 = 10;\nconst PP_2 = 25;\nconst PP_3 = 50;\nconst PP_4 = 100;\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: \"300px\",\n    width: \"100%\",\n  },\n  tableTH: {\n    color: \"#0d218c\",\n    whiteSpace: \"nowrap\",\n    fontSize: \"0.8rem\",\n    padding: \"8px 0\",\n  },\n  tableTD: {\n    color: \"#c1c1c1\",\n    padding: \"3px\",\n  },\n  tableBG: {\n    backgroundColor: \"#e0e0e0\",\n  },\n});\n\nexport default function TableGrid(props) {\n  const {\n    rowsPageData,\n    handleSorting,\n    onChangePage,\n    onChangePerPage,\n    onFilterSort,\n    paginator,\n    isFilterActive,\n    onFilterReset,\n  } = props;\n\n  const [dirSort, setDirSort] = useState({\n    sender: \"desc\",\n    id: \"desc\",\n    date: \"desc\",\n    debit: \"desc\",\n    credit: \"desc\",\n    active: \"id\",\n  });\n\n  const classes = useStyles();\n\n  const reversDirArrow = (dir) => {\n    return dir === \"asc\" ? \"desc\" : \"asc\";\n  };\n\n  const handleLastSorting = (fieldName) => {\n    let dir = reversDirArrow(dirSort[fieldName]);\n    setDirSort((prev) => ({ ...prev, [fieldName]: dir, active: fieldName }));\n    handleSorting(dir, fieldName, rowsPageData);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead className={classes.tableBG}>\n          <TableRow>\n            <TableCell className={classes.tableTH} align=\"left\">\n              <SortingIcon\n                active={dirSort.active}\n                name=\"sender\"\n                direction={dirSort.sender}\n                clickSort={handleLastSorting}\n              />\n              Sender\n            </TableCell>\n            <TableCell className={classes.tableTH} align=\"left\">\n              <SortingIcon\n                active={dirSort.active}\n                name=\"id\"\n                direction={dirSort.id}\n                clickSort={handleLastSorting}\n              />\n              Transaction ID\n            </TableCell>\n            <TableCell className={classes.tableTH} align=\"left\">\n              <SortingIcon\n                active={dirSort.active}\n                name=\"date\"\n                direction={dirSort.date}\n                clickSort={handleLastSorting}\n              />\n              Date\n            </TableCell>\n            <TableCell className={classes.tableTH} align=\"left\">\n              <SortingIcon\n                active={dirSort.active}\n                name=\"debit\"\n                direction={dirSort.debit}\n                clickSort={handleLastSorting}\n              />\n              Debet Amount\n            </TableCell>\n            <TableCell className={classes.tableTH} align=\"left\">\n              <SortingIcon\n                active={dirSort.active}\n                name=\"credit\"\n                direction={dirSort.credit}\n                clickSort={handleLastSorting}\n              />\n              Credit Amount\n              <FilterButton\n                onFilterSort={onFilterSort}\n                onFilterReset={onFilterReset}\n                isFilterActive={isFilterActive}\n              />\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rowsPageData.map((row) => (\n            <TableRow key={row.transactionID}>\n              <TableCell className={classes.tableTD}>{row.sender}</TableCell>\n              <TableCell className={classes.tableTD} align=\"left\">\n                {row.transactionID}\n              </TableCell>\n              <TableCell className={classes.tableTD} align=\"left\">\n                {new Date(row.date).toLocaleString()}\n              </TableCell>\n              <TableCell className={classes.tableTD} align=\"left\">\n                {row.debitAmount}\n              </TableCell>\n              <TableCell className={classes.tableTD} align=\"left\">\n                {row.creditAmount}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[\n                PP_1,\n                PP_2,\n                PP_3,\n                PP_4,\n                { label: \"All\", value: ALL_PAGES },\n              ]}\n              colSpan={5}\n              count={paginator.count}\n              rowsPerPage={\n                paginator.perPage === ALL_PAGES\n                  ? paginator.count\n                  : paginator.perPage\n              }\n              page={paginator.page}\n              SelectProps={{\n                inputProps: { \"aria-label\": \"Records per page\" },\n                native: true,\n              }}\n              onChangePage={onChangePage}\n              onChangeRowsPerPage={onChangePerPage}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\";\nimport Box from \"@material-ui/core/Box\";\nimport \"./loading.css\";\n\nconst setStyle = makeStyles({\n  loading: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(0,0,0,0.2)\",\n    zIndex: 200,\n  },\n  icon: {\n    fontSize: \"3rem\",\n  },\n});\n\nexport default function Loading({ isLoading }) {\n  const classes = setStyle();\n  if (!isLoading) return null;\n  return (\n    <Box className={classes.loading}>\n      <HourglassEmptyIcon id=\"load\" />\n    </Box>\n  );\n}\n","import Chart from \"chart.js\";\nimport { useEffect, useState } from \"react\";\nimport mockFetch from \"./mockFetch/mockfetch\";\nimport TableGrid from \"./TableGrid/TableGrid\";\nimport Box from \"@material-ui/core/Box\";\nimport Loading from \"./Lodaing/Loading\";\nimport \"./graph.css\";\n\nconst URL = \"https://graphs.com\";\nconst USER_NAME = \"Vladimir\";\nconst USER_PASSWORD = \"admin\";\nconst DEBIT = 0;\nconst CREDIT = 1;\nconst DEBIT_AMOUNT_FIELD = \"debitAmount\";\nconst CREDIT_AMOUNT_FIELD = \"creditAmount\";\nconst DEFAULT_PAGE = 0;\nconst DEFAULT_PER_PAGE = 10;\nconst SERVER_DELAY_TIME = 1000;\nconst PICES_ON_PIE = 5;\nconst ZERO = 0;\n\nfunction creatGraph(itemId, values) {\n  const ctx = document.getElementById(itemId).getContext(\"2d\");\n  const labels = values.map((i, index) => index + 1);\n  const chart = new Chart(ctx, {\n    type: \"pie\",\n    data: {\n      labels: labels,\n      datasets: [\n        {\n          data: values,\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.7)\",\n            \"rgba(54, 162, 235, 0.7)\",\n            \"rgba(255, 206, 86, 0.7)\",\n            \"rgba(75, 192, 192, 0.7)\",\n            \"rgba(153, 102, 255, 0.7)\",\n            \"rgba(255, 159, 64, 0.7)\",\n          ],\n          borderColor: \"gray\",\n          borderWidth: 1,\n        },\n      ],\n    },\n  });\n  return chart.destroy.bind(chart);\n}\n\nfunction getPicesOfChart(data, fieldName) {\n  const points = [];\n  const len = data.length;\n  const step = len > PICES_ON_PIE ? Math.ceil(len / PICES_ON_PIE) : 1;\n  const name = fieldName === DEBIT ? DEBIT_AMOUNT_FIELD : CREDIT_AMOUNT_FIELD;\n  let sum = ZERO;\n  if (data) {\n    for (let i = ZERO; i < len; i++) {\n      sum += data[i][name];\n      if ((i + 1) % step === ZERO) {\n        points.push(sum);\n        sum = ZERO;\n      }\n    }\n    return points;\n  } else points.push(ZERO);\n  return points;\n}\n\nfunction sorting(dir, field, dataList) {\n  const NEGATIVE_SENSE = -1;\n  const POZITIVE_SENSE = 1;\n  const sign = dir === \"desc\" ? POZITIVE_SENSE : NEGATIVE_SENSE;\n  return dataList.sort((a, b) => {\n    if (a[field] > b[field]) return 1 * sign;\n    if (a[field] < b[field]) return -1 * sign;\n    else return ZERO;\n  });\n}\n\nfunction sortingByFieldName(dir, fieldName, rowsPageData) {\n  const newDataList = [...rowsPageData];\n  switch (fieldName) {\n    case \"id\": {\n      sorting(dir, \"transactionID\", newDataList);\n      break;\n    }\n    case \"sender\": {\n      sorting(dir, \"sender\", newDataList);\n      break;\n    }\n    case \"date\": {\n      sorting(dir, \"date\", newDataList);\n      break;\n    }\n    case \"credit\": {\n      sorting(dir, \"creditAmount\", newDataList);\n      break;\n    }\n    case \"debit\": {\n      sorting(dir, \"debitAmount\", newDataList);\n      break;\n    }\n    default: {\n      sorting(dir, \"transactionID\", newDataList);\n    }\n  }\n  return newDataList;\n}\nfunction getDateValue(date) {\n  const newDate = new Date(date);\n  const day = newDate.getDate();\n  const year = newDate.getFullYear();\n  const month = newDate.getMonth();\n  return new Date(year, month, day).valueOf();\n}\n\nfunction filtrDataByDate(dataList, date) {\n  const dateValue = getDateValue(date);\n  const filteredData = dataList.filter(function (item) {\n    const itemDateValue = getDateValue(item.date.valueOf());\n    if (itemDateValue === dateValue) return true;\n    return false;\n  });\n  return filteredData;\n}\nfunction defaultPagination(count = ZERO) {\n  return { page: DEFAULT_PAGE, perPage: DEFAULT_PER_PAGE, count };\n}\n\nfunction Graph() {\n  const [rowsPageData, setRowsPageData] = useState([]);\n  const [paginator, setPaginator] = useState(() => defaultPagination());\n  const [isFilterActive, setFilter] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const onFilterSort = (newDate) => {\n    const filteredData = filtrDataByDate(rowsPageData, newDate);\n\n    setFilter(true);\n    setRowsPageData(filteredData);\n    setPaginator({\n      page: DEFAULT_PAGE,\n      perPage: DEFAULT_PER_PAGE,\n      count: filteredData.length,\n    });\n  };\n  const onFilterReset = () => {\n    getDataFromServer(URL);\n    setFilter(false);\n  };\n\n  const handleSorting = (dir, fieldName, rows) => {\n    setRowsPageData(sortingByFieldName(dir, fieldName, rowsPageData));\n  };\n\n  const onChangePage = (e, page) => {\n    getDataFromServer(URL, paginator, page);\n  };\n\n  const onChangePerPage = (perPage) => {\n    const pagesOnPage = Number(perPage.target.value);\n    getDataFromServer(URL, paginator, 0, pagesOnPage);\n  };\n\n  const getDataFromServer = (url, paging, page, perPage) => {\n    const payload = {\n      userName: USER_NAME,\n      userPassword: USER_PASSWORD,\n      page: DEFAULT_PAGE,\n      perPage: DEFAULT_PER_PAGE,\n    };\n    if (paging) {\n      payload.page = page !== undefined ? page : paging.page;\n      payload.perPage = perPage ? perPage : paging.perPage;\n    }\n\n    mockFetch.get(url, payload).then((data) => {\n      if (data.status === \"ok\") {\n        setTimeout(() => {\n          setRowsPageData(data.data);\n          setPaginator((prev) => ({\n            ...prev,\n            page: data.page,\n            count: data.count,\n            perPage: data.perPage,\n          }));\n          setLoading(false);\n          console.log(\"from server: \", data);\n        }, SERVER_DELAY_TIME);\n      } else {\n        throw new Error(\"Something is wrong!!! \" + data.message);\n      }\n    });\n    setLoading(true);\n  };\n\n  useEffect(() => {\n    getDataFromServer(URL);\n  }, []);\n\n  useEffect(() => {\n    if (rowsPageData.length > ZERO) {\n      const valuesCredit = getPicesOfChart(rowsPageData, DEBIT);\n      const valuesDebit = getPicesOfChart(rowsPageData, CREDIT);\n      const destroyCredit = creatGraph(\"chart-credit\", valuesCredit);\n      const destroyDebit = creatGraph(\"chart-debit\", valuesDebit);\n      return () => {\n        destroyDebit();\n        destroyCredit();\n      };\n    }\n  }, [rowsPageData]);\n\n  return (\n    <div className=\"App\">\n      <Loading isLoading={isLoading} />\n      <Box\n        className=\"App__graph-container\"\n        fontFamily=\"Roboto\"\n        fontSize={20}\n        p={1}\n      >\n        <Box className=\"App__graphic\">\n          Debit Amount:\n          <canvas id=\"chart-credit\"></canvas>\n        </Box>\n        <Box className=\"App__graphic\">\n          Credit Amount:\n          <canvas id=\"chart-debit\"></canvas>\n        </Box>\n      </Box>\n      <Box className=\"App__table\">\n        <TableGrid\n          rowsPageData={rowsPageData}\n          onFilterSort={onFilterSort}\n          paginator={paginator}\n          handleSorting={handleSorting}\n          onChangePage={onChangePage}\n          onChangePerPage={onChangePerPage}\n          isFilterActive={isFilterActive}\n          onFilterReset={onFilterReset}\n        />\n      </Box>\n    </div>\n  );\n}\n\nexport default Graph;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Graph from \"./Graph\";\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<Graph />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}